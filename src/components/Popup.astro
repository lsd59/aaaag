---
interface Props {
  id: string;
  title?: string;
  isVisible?: boolean;
}

const { id, title, isVisible = false } = Astro.props;
---

<div
  class={`popup-overlay ${isVisible ? "active" : ""}`}
  id={id}
  role="dialog"
  aria-labelledby={`${id}Title`}
>
  <div class="popup-content">
    <div class="popup-header">
      <h2 id={`${id}Title`} class="popup-title">{title}</h2>
      <span class="close-icon" data-popup-close={id}>
        <span
          class="iconify"
          data-icon="mdi:close"
          data-width="20"
          data-height="20"></span>
      </span>
    </div>
    <hr class="divider" />
    <div class="dynamic-content">
      <slot />
    </div>
  </div>
</div>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400&display=swap");

  .popup-overlay {
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(4px);
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    z-index: 1000;
  }

  .popup-overlay.active {
    display: flex;
    animation: fadeIn 0.2s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.98);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .popup-content {
    background-color: var(--bg-secondary);
    border-radius: 0.5rem;
    max-width: 620px;
    width: 100%;
    color: white;
    display: flex;
    flex-direction: column;
    max-height: 85vh;
    overflow: hidden;
    border: 1px solid rgba(0, 255, 0, 0.1);
    box-shadow: 0 0 20px rgba(0, 255, 0, 0.1);
    position: relative;
  }

  .popup-content::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      0deg,
      rgba(0, 255, 0, 0.03),
      rgba(0, 255, 0, 0.03) 1px,
      transparent 1px,
      transparent 2px
    );
    pointer-events: none;
    z-index: 1;
  }

  .popup-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.25rem;
    background-color: var(--bg-tertiary);
    border-bottom: 1px solid rgba(0, 255, 0, 0.1);
    position: relative;
    z-index: 2;
  }

  .popup-title {
    font-family: var(--null-signal-font, "Courier New", "Consolas", monospace);
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    color: #00ff00;
    letter-spacing: 1px;
    text-transform: uppercase;
    position: relative;
    animation: glitch 2s infinite;
  }

  @keyframes glitch {
    0% {
      transform: translate(0);
    }
    20% {
      transform: translate(-1px, 1px);
    }
    40% {
      transform: translate(-1px, -1px);
    }
    60% {
      transform: translate(1px, 1px);
    }
    80% {
      transform: translate(1px, -1px);
    }
    100% {
      transform: translate(0);
    }
  }

  .close-icon {
    cursor: pointer;
    padding: 0.375rem;
    border-radius: 0.375rem;
    color: #00ff00;
    transition: all 0.15s;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 2;
  }

  .close-icon:hover {
    background-color: rgba(0, 255, 0, 0.1);
    color: #fff;
    text-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }

  .divider {
    border: 0;
    height: 1px;
    background: rgba(0, 255, 0, 0.1);
    margin: 0;
  }

  .dynamic-content {
    flex: 1;
    overflow-y: auto;
    padding: 1.25rem;
    -ms-overflow-style: none;
    scrollbar-width: none;
    position: relative;
    z-index: 2;
    font-family: var(--null-signal-font, "Courier New", "Consolas", monospace);
    letter-spacing: 0.5px;
  }

  .dynamic-content::-webkit-scrollbar {
    display: none;
  }

  /* Add terminal-like cursor to inputs */
  .dynamic-content input,
  .dynamic-content select,
  .dynamic-content textarea {
    font-family: var(--null-signal-font, "Courier New", "Consolas", monospace);
    background: var(--bg-tertiary);
    border: 1px solid rgba(0, 255, 0, 0.2);
    color: #00ff00;
    padding: 0.5rem;
    border-radius: 0.25rem;
  }

  .dynamic-content input:focus,
  .dynamic-content select:focus,
  .dynamic-content textarea:focus {
    outline: none;
    border-color: #00ff00;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);
  }

  /* Style buttons in popup */
  .dynamic-content button {
    font-family: var(--null-signal-font, "Courier New", "Consolas", monospace);
    background: var(--bg-tertiary);
    border: 1px solid rgba(0, 255, 0, 0.2);
    color: #00ff00;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s;
    letter-spacing: 0.5px;
  }

  .dynamic-content button:hover {
    background: rgba(0, 255, 0, 0.1);
    border-color: #00ff00;
    text-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }
</style>

<script src="https://code.iconify.design/2/2.1.2/iconify.min.js"></script>

<script>
  function closePopup(id: string) {
    const popupOverlay = document.getElementById(id);
    if (popupOverlay) {
      popupOverlay.classList.remove("active");
    }
  }

  document.querySelectorAll("[data-popup-close]").forEach((button) => {
    const popupId = button.getAttribute("data-popup-close");
    if (popupId) {
      button.addEventListener("click", () => closePopup(popupId));
    }
  });

  document.querySelectorAll(".popup-overlay").forEach((popup) => {
    popup.addEventListener("click", (e) => {
      if (e.target === popup) {
        closePopup(popup.id);
      }
    });
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      const activePopup = document.querySelector(".popup-overlay.active");
      if (activePopup) {
        closePopup(activePopup.id);
      }
    }
  });

  // Add global functions to window
  declare global {
    interface Window {
      openPopup: (popupId: string) => void;
      closePopup: (popupId: string) => void;
    }
  }

  // Function to open popup
  window.openPopup = function (popupId: string) {
    const popup = document.getElementById(popupId);
    if (popup) {
      popup.classList.add("active");
    }
  };

  // Function to close popup
  window.closePopup = function (popupId: string) {
    const popup = document.getElementById(popupId);
    if (popup) {
      popup.classList.remove("active");
    }
  };
</script>
