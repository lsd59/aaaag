import { c as createComponent, a as createAstro, m as maybeRenderHead, b as addAttribute, e as renderSlot, r as renderTemplate, f as defineScriptVars, d as renderComponent } from '../chunks/astro/server_MzpsRm1w.mjs';
import 'kleur/colors';
import { i as initializeDb, a as getAllUsers } from '../chunks/db__92qgssi.mjs';
import { $ as $$BaseLayout } from '../chunks/BaseLayout_BIPLtU9Y.mjs';
import 'clsx';
/* empty css                                 */
export { renderers } from '../renderers.mjs';

const $$Astro$2 = createAstro();
const $$Popup = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$Popup;
  const { id, title, isVisible = false } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<div${addAttribute(`popup-overlay ${isVisible ? "active" : ""}`, "class")}${addAttribute(id, "id")} role="dialog"${addAttribute(`${id}Title`, "aria-labelledby")} data-astro-cid-qzaw6m73> <div class="popup-content" data-astro-cid-qzaw6m73> <div class="popup-header" data-astro-cid-qzaw6m73> <h2${addAttribute(`${id}Title`, "id")} class="popup-title" data-astro-cid-qzaw6m73>${title}</h2> <span class="close-icon"${addAttribute(id, "data-popup-close")} data-astro-cid-qzaw6m73> <span class="iconify" data-icon="mdi:close" data-width="20" data-height="20" data-astro-cid-qzaw6m73></span> </span> </div> <hr class="divider" data-astro-cid-qzaw6m73> <div class="dynamic-content" data-astro-cid-qzaw6m73> ${renderSlot($$result, $$slots["default"])} </div> </div> </div>   `;
}, "C:/Users/coold/Desktop/panels/gemini.com/src/components/Popup.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro$1 = createAstro();
const $$Toast = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$Toast;
  const {
    position = "bottom-right",
    duration = 3e3
  } = Astro2.props;
  return renderTemplate(_a || (_a = __template([" ", '<div id="toast-container"', " data-astro-cid-5i5fqekp></div> <script>(function(){", "\n\n  const activeToasts = new Map();\n  let toastCounter = 0;\n  const MAX_VISIBLE_TOASTS = 3;\n\n  function parseDuration(duration) {\n    if (typeof duration === 'number') return duration;\n    if (!duration) return 3000; // default 3 seconds\n\n    const match = duration.match(/^(\\d+)([dhm])$/);\n    if (!match) return 3000;\n\n    const [, value, unit] = match;\n    const numValue = parseInt(value);\n\n    switch(unit) {\n      case 'd': return numValue * 24 * 60 * 60 * 1000; // days to ms\n      case 'h': return numValue * 60 * 60 * 1000;      // hours to ms\n      case 'm': return numValue * 60 * 1000;           // minutes to ms\n      default: return 3000;\n    }\n  }\n\n  function showToast(message, type = 'success', customDuration) {\n    const toastDuration = parseDuration(customDuration || duration);\n    const container = document.getElementById('toast-container');\n    if (!container) return;\n\n    if (container.children.length >= MAX_VISIBLE_TOASTS) {\n      const oldestToast = container.firstChild;\n      if (oldestToast) {\n        removeToast(oldestToast.id);\n      }\n    }\n\n    const toastId = `toast-${Date.now()}-${toastCounter++}`;\n\n    const toast = document.createElement('div');\n    toast.className = `toast ${type}`;\n    toast.id = toastId;\n\n    const content = document.createElement('div');\n    content.className = 'toast-content';\n    content.textContent = message;\n\n    const closeBtn = document.createElement('button');\n    closeBtn.className = `toast-close ${type}`;\n    closeBtn.innerHTML = '&times;';\n    closeBtn.addEventListener('click', (e) => {\n      e.stopPropagation();\n      removeToast(toastId);\n    });\n\n    const icon = document.createElement('span');\n    icon.className = 'toast-icon';\n\n    const iconElement = document.createElement('iconify-icon');\n    iconElement.style.color = 'currentColor';\n    iconElement.style.fontSize = '16px';\n\n    switch(type) {\n      case 'success':\n        iconElement.setAttribute('icon', 'solar:check-circle-bold');\n        break;\n      case 'error':\n        iconElement.setAttribute('icon', 'solar:close-circle-bold');\n        break;\n      default:\n        iconElement.setAttribute('icon', 'solar:check-circle-bold');\n    }\n\n    icon.appendChild(iconElement);\n\n    toast.appendChild(icon);\n    toast.appendChild(content);\n    toast.appendChild(closeBtn);\n\n    container.appendChild(toast);\n\n    requestAnimationFrame(() => {\n      toast.classList.add('show');\n    });\n\n    const timeoutObj = {\n      autoClose: null,\n      fadeOut: null\n    };\n\n    timeoutObj.autoClose = setTimeout(() => {\n      removeToast(toastId);\n    }, toastDuration);\n\n    activeToasts.set(toastId, {\n      element: toast,\n      timeouts: timeoutObj\n    });\n\n    toast.addEventListener('click', () => {\n      removeToast(toastId);\n    });\n\n    toast.addEventListener('mouseenter', () => {\n      const toastData = activeToasts.get(toastId);\n      if (toastData) {\n        clearTimeout(toastData.timeouts.autoClose);\n      }\n    });\n\n    toast.addEventListener('mouseleave', () => {\n      const toastData = activeToasts.get(toastId);\n      if (toastData) {\n        toastData.timeouts.autoClose = setTimeout(() => {\n          removeToast(toastId);\n        }, toastDuration);\n      }\n    });\n\n    return toast;\n  }\n\n  function removeToast(toastId) {\n    const toastData = activeToasts.get(toastId);\n    if (!toastData) return;\n\n    const { element, timeouts } = toastData;\n\n    if (timeouts.autoClose) clearTimeout(timeouts.autoClose);\n    if (timeouts.fadeOut) clearTimeout(timeouts.fadeOut);\n\n    element.classList.remove('show');\n    element.style.pointerEvents = 'none';\n    element.style.opacity = '0';\n    element.style.transform = 'scale(0.8) translateY(0)';\n\n    timeouts.fadeOut = setTimeout(() => {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n      activeToasts.delete(toastId);\n    }, 300); // Reduced from 65600 to 300ms for faster cleanup\n  }\n\n  window.showToast = showToast;\n})();<\/script> "], [" ", '<div id="toast-container"', " data-astro-cid-5i5fqekp></div> <script>(function(){", "\n\n  const activeToasts = new Map();\n  let toastCounter = 0;\n  const MAX_VISIBLE_TOASTS = 3;\n\n  function parseDuration(duration) {\n    if (typeof duration === 'number') return duration;\n    if (!duration) return 3000; // default 3 seconds\n\n    const match = duration.match(/^(\\\\d+)([dhm])$/);\n    if (!match) return 3000;\n\n    const [, value, unit] = match;\n    const numValue = parseInt(value);\n\n    switch(unit) {\n      case 'd': return numValue * 24 * 60 * 60 * 1000; // days to ms\n      case 'h': return numValue * 60 * 60 * 1000;      // hours to ms\n      case 'm': return numValue * 60 * 1000;           // minutes to ms\n      default: return 3000;\n    }\n  }\n\n  function showToast(message, type = 'success', customDuration) {\n    const toastDuration = parseDuration(customDuration || duration);\n    const container = document.getElementById('toast-container');\n    if (!container) return;\n\n    if (container.children.length >= MAX_VISIBLE_TOASTS) {\n      const oldestToast = container.firstChild;\n      if (oldestToast) {\n        removeToast(oldestToast.id);\n      }\n    }\n\n    const toastId = \\`toast-\\${Date.now()}-\\${toastCounter++}\\`;\n\n    const toast = document.createElement('div');\n    toast.className = \\`toast \\${type}\\`;\n    toast.id = toastId;\n\n    const content = document.createElement('div');\n    content.className = 'toast-content';\n    content.textContent = message;\n\n    const closeBtn = document.createElement('button');\n    closeBtn.className = \\`toast-close \\${type}\\`;\n    closeBtn.innerHTML = '&times;';\n    closeBtn.addEventListener('click', (e) => {\n      e.stopPropagation();\n      removeToast(toastId);\n    });\n\n    const icon = document.createElement('span');\n    icon.className = 'toast-icon';\n\n    const iconElement = document.createElement('iconify-icon');\n    iconElement.style.color = 'currentColor';\n    iconElement.style.fontSize = '16px';\n\n    switch(type) {\n      case 'success':\n        iconElement.setAttribute('icon', 'solar:check-circle-bold');\n        break;\n      case 'error':\n        iconElement.setAttribute('icon', 'solar:close-circle-bold');\n        break;\n      default:\n        iconElement.setAttribute('icon', 'solar:check-circle-bold');\n    }\n\n    icon.appendChild(iconElement);\n\n    toast.appendChild(icon);\n    toast.appendChild(content);\n    toast.appendChild(closeBtn);\n\n    container.appendChild(toast);\n\n    requestAnimationFrame(() => {\n      toast.classList.add('show');\n    });\n\n    const timeoutObj = {\n      autoClose: null,\n      fadeOut: null\n    };\n\n    timeoutObj.autoClose = setTimeout(() => {\n      removeToast(toastId);\n    }, toastDuration);\n\n    activeToasts.set(toastId, {\n      element: toast,\n      timeouts: timeoutObj\n    });\n\n    toast.addEventListener('click', () => {\n      removeToast(toastId);\n    });\n\n    toast.addEventListener('mouseenter', () => {\n      const toastData = activeToasts.get(toastId);\n      if (toastData) {\n        clearTimeout(toastData.timeouts.autoClose);\n      }\n    });\n\n    toast.addEventListener('mouseleave', () => {\n      const toastData = activeToasts.get(toastId);\n      if (toastData) {\n        toastData.timeouts.autoClose = setTimeout(() => {\n          removeToast(toastId);\n        }, toastDuration);\n      }\n    });\n\n    return toast;\n  }\n\n  function removeToast(toastId) {\n    const toastData = activeToasts.get(toastId);\n    if (!toastData) return;\n\n    const { element, timeouts } = toastData;\n\n    if (timeouts.autoClose) clearTimeout(timeouts.autoClose);\n    if (timeouts.fadeOut) clearTimeout(timeouts.fadeOut);\n\n    element.classList.remove('show');\n    element.style.pointerEvents = 'none';\n    element.style.opacity = '0';\n    element.style.transform = 'scale(0.8) translateY(0)';\n\n    timeouts.fadeOut = setTimeout(() => {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n      activeToasts.delete(toastId);\n    }, 300); // Reduced from 65600 to 300ms for faster cleanup\n  }\n\n  window.showToast = showToast;\n})();<\/script> "])), maybeRenderHead(), addAttribute(position, "class"), defineScriptVars({ position, duration }));
}, "C:/Users/coold/Desktop/panels/gemini.com/src/components/Toast.astro", void 0);

const $$Astro = createAstro();
const $$Panel = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Panel;
  initializeDb();
  const userEmail = Astro2.cookies.get("user_email")?.value;
  const isAdmin = userEmail === "admin@gmail.com";
  if (!isAdmin) {
    return Astro2.redirect("/");
  }
  const allUsers = await getAllUsers();
  const users = allUsers.filter(
    (user) => user.email !== "admin@gmail.com"
  );
  return renderTemplate`${renderComponent($$result, "BaseLayout", $$BaseLayout, { "title": "Gemini Admin Panel", "data-astro-cid-4npzjdyg": true }, { "default": async ($$result2) => renderTemplate` ${renderComponent($$result2, "Toast", $$Toast, { "position": "top-center", "data-astro-cid-4npzjdyg": true })} ${maybeRenderHead()}<div class="admin-container" data-astro-cid-4npzjdyg> <div class="admin-header" data-astro-cid-4npzjdyg> <h1 data-astro-cid-4npzjdyg>Gemini Admin Panel</h1> <div class="admin-info" data-astro-cid-4npzjdyg> <button id="deleteAllButton" class="delete-all-button" title="Delete All Users" data-astro-cid-4npzjdyg> <span class="iconify" data-icon="mdi:delete-sweep" data-width="20" data-height="20" data-astro-cid-4npzjdyg></span> </button> <button id="refreshButton" class="refresh-button" title="Refresh Page" data-astro-cid-4npzjdyg> <span class="iconify" data-icon="mdi:refresh" data-width="20" data-height="20" data-astro-cid-4npzjdyg></span> </button> </div> </div> <div class="admin-content" data-astro-cid-4npzjdyg> <div class="section-header" data-astro-cid-4npzjdyg> <h2 data-astro-cid-4npzjdyg>Users (<span id="userCount" data-astro-cid-4npzjdyg>${users.length}</span>)</h2> <div class="table-controls" data-astro-cid-4npzjdyg> <div class="search-box" data-astro-cid-4npzjdyg> <input type="text" id="userSearch" placeholder="Search users..." data-astro-cid-4npzjdyg> </div> </div> </div> <div class="data-table" data-astro-cid-4npzjdyg> <div class="data-table-wrapper" data-astro-cid-4npzjdyg> <table id="usersTable" data-astro-cid-4npzjdyg> <thead data-astro-cid-4npzjdyg> <tr data-astro-cid-4npzjdyg> <th data-astro-cid-4npzjdyg>ID</th> <th data-astro-cid-4npzjdyg>UID</th> <th data-astro-cid-4npzjdyg>Email</th> <th data-astro-cid-4npzjdyg>Current Page</th> <th data-astro-cid-4npzjdyg>Created</th> <th data-astro-cid-4npzjdyg>Actions</th> </tr> </thead> <tbody id="usersTableBody" data-astro-cid-4npzjdyg> ${users.map((user, index) => renderTemplate`<tr class="user-row"${addAttribute(Math.floor(index / 10) + 1, "data-page")} data-astro-cid-4npzjdyg> <td data-astro-cid-4npzjdyg>${user.id}</td> <td data-astro-cid-4npzjdyg>${user.uid}</td> <td data-astro-cid-4npzjdyg>${user.email}</td> <td data-astro-cid-4npzjdyg> <span class="page-badge {user.current_page || 'wait'}" data-astro-cid-4npzjdyg> ${user.current_page || "Wait"} </span> </td> <td data-astro-cid-4npzjdyg>${new Date(user.created_at).toLocaleString()}</td> <td data-astro-cid-4npzjdyg> <button class="action-button view"${addAttribute(user.email, "data-email")} data-astro-cid-4npzjdyg>
View
</button> <button class="action-button redirect"${addAttribute(user.email, "data-email")} data-astro-cid-4npzjdyg>
Redirect
</button> </td> </tr>`)} </tbody> </table> </div> <div class="pagination" data-astro-cid-4npzjdyg> <button id="prevPage" class="pagination-button" disabled data-astro-cid-4npzjdyg> <span class="iconify" data-icon="mdi:chevron-left" data-width="20" data-height="20" data-astro-cid-4npzjdyg></span> </button> <div class="page-numbers" data-astro-cid-4npzjdyg> <button class="page-number" data-page="1" data-astro-cid-4npzjdyg>1</button> <button class="page-number" data-page="2" data-astro-cid-4npzjdyg>2</button> <button class="page-number" data-page="3" data-astro-cid-4npzjdyg>3</button> <button class="page-number" data-page="4" data-astro-cid-4npzjdyg>4</button> <button class="page-number" data-page="5" data-astro-cid-4npzjdyg>5</button> </div> <button id="nextPage" class="pagination-button" data-astro-cid-4npzjdyg> <span class="iconify" data-icon="mdi:chevron-right" data-width="20" data-height="20" data-astro-cid-4npzjdyg></span> </button> </div> </div> </div> </div> ${renderComponent($$result2, "Popup", $$Popup, { "id": "userDetailsPopup", "title": "User Details", "data-astro-cid-4npzjdyg": true }, { "default": async ($$result3) => renderTemplate` <div id="userDetails" class="user-details" data-astro-cid-4npzjdyg> <div class="user-details-content" data-astro-cid-4npzjdyg> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>Email:</strong> <span id="detailEmail" data-astro-cid-4npzjdyg></span></p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>Password:</strong> <span id="detailPassword" data-astro-cid-4npzjdyg></span></p> <p data-astro-cid-4npzjdyg> <strong data-astro-cid-4npzjdyg>User's Auth Code:</strong> <span id="detailUserSeed" data-astro-cid-4npzjdyg></span> </p> <p style="display:none;" data-astro-cid-4npzjdyg> <strong data-astro-cid-4npzjdyg>Email Code:</strong> <span id="detailEmailCode" data-astro-cid-4npzjdyg></span> </p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>IP Address:</strong> <span id="detailIp" data-astro-cid-4npzjdyg></span></p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>Browser:</strong> <span id="detailBrowser" data-astro-cid-4npzjdyg></span></p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>Operating System:</strong> <span id="detailOs" data-astro-cid-4npzjdyg></span></p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>User Agent:</strong> <span id="detailUserAgent" data-astro-cid-4npzjdyg></span></p> <p style="display:none;" data-astro-cid-4npzjdyg> <strong data-astro-cid-4npzjdyg>Balance Range:</strong> <span id="detailBalance" data-astro-cid-4npzjdyg></span> </p> <p data-astro-cid-4npzjdyg> <strong data-astro-cid-4npzjdyg>Current Page:</strong> <span id="detailCurrentPage" data-astro-cid-4npzjdyg></span> </p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>Created:</strong> <span id="detailCreated" data-astro-cid-4npzjdyg></span></p> <p data-astro-cid-4npzjdyg><strong data-astro-cid-4npzjdyg>Updated:</strong> <span id="detailUpdated" data-astro-cid-4npzjdyg></span></p> </div> </div> ` })} ${renderComponent($$result2, "Popup", $$Popup, { "id": "redirectPopup", "title": "Redirect User", "data-astro-cid-4npzjdyg": true }, { "default": async ($$result3) => renderTemplate` <div class="redirect-container" data-astro-cid-4npzjdyg> <div class="redirect-options" data-astro-cid-4npzjdyg> <label class="redirect-label" data-astro-cid-4npzjdyg>Select a page to redirect to</label> <select id="redirectSelect" class="redirect-select" data-astro-cid-4npzjdyg> <option value="" disabled selected data-astro-cid-4npzjdyg>Choose a page</option> <!-- <option value="wait">Waiting (Infinite Loading)</option> --> <option value="2fa" data-astro-cid-4npzjdyg>2FA Verification</option> <!-- <option value="seed">Seed Phrase</option> --> <!-- <option value="reset">Password Reset</option> --> <!-- <option value="balance">Balance Confirmation</option> --> </select> </div> <button id="redirectButton" class="send-button" disabled data-astro-cid-4npzjdyg>Redirect</button> </div> ` })} ${renderComponent($$result2, "Popup", $$Popup, { "id": "deleteConfirmPopup", "title": "Confirm Delete All Users", "data-astro-cid-4npzjdyg": true }, { "default": async ($$result3) => renderTemplate` <div class="delete-confirm-container" data-astro-cid-4npzjdyg> <p class="delete-warning" data-astro-cid-4npzjdyg>
Are you sure you want to delete ALL users? This action cannot be undone.
</p> <div class="delete-actions" data-astro-cid-4npzjdyg> <button id="confirmDeleteButton" class="delete-confirm-button" data-astro-cid-4npzjdyg>Yes, Delete All</button> <button id="cancelDeleteButton" class="cancel-button" data-astro-cid-4npzjdyg>Cancel</button> </div> </div> ` })} ` })}  `;
}, "C:/Users/coold/Desktop/panels/gemini.com/src/pages/panel.astro", void 0);
const $$file = "C:/Users/coold/Desktop/panels/gemini.com/src/pages/panel.astro";
const $$url = "/panel";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Panel,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
